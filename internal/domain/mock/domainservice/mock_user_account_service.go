// Code generated by MockGen. DO NOT EDIT.
// Source: user_account_service.go
//
// Generated by this command:
//
//	mockgen -source=user_account_service.go -destination=../mock/domainservice/mock_user_account_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserAccountService is a mock of UserAccountService interface.
type MockUserAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountServiceMockRecorder
	isgomock struct{}
}

// MockUserAccountServiceMockRecorder is the mock recorder for MockUserAccountService.
type MockUserAccountServiceMockRecorder struct {
	mock *MockUserAccountService
}

// NewMockUserAccountService creates a new mock instance.
func NewMockUserAccountService(ctrl *gomock.Controller) *MockUserAccountService {
	mock := &MockUserAccountService{ctrl: ctrl}
	mock.recorder = &MockUserAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccountService) EXPECT() *MockUserAccountServiceMockRecorder {
	return m.recorder
}

// CreateUserAccount mocks base method.
func (m *MockUserAccountService) CreateUserAccount(lineUserInfo *domainmodel.LINEUserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", lineUserInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockUserAccountServiceMockRecorder) CreateUserAccount(lineUserInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockUserAccountService)(nil).CreateUserAccount), lineUserInfo)
}

// FetchUserAccount mocks base method.
func (m *MockUserAccountService) FetchUserAccount(userID domainmodel.UserID) (*domainmodel.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserAccount", userID)
	ret0, _ := ret[0].(*domainmodel.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserAccount indicates an expected call of FetchUserAccount.
func (mr *MockUserAccountServiceMockRecorder) FetchUserAccount(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserAccount", reflect.TypeOf((*MockUserAccountService)(nil).FetchUserAccount), userID)
}

// IsDuplicateUserAccount mocks base method.
func (m *MockUserAccountService) IsDuplicateUserAccount(lineUserID domainmodel.LINEUserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateUserAccount", lineUserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDuplicateUserAccount indicates an expected call of IsDuplicateUserAccount.
func (mr *MockUserAccountServiceMockRecorder) IsDuplicateUserAccount(lineUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateUserAccount", reflect.TypeOf((*MockUserAccountService)(nil).IsDuplicateUserAccount), lineUserID)
}
