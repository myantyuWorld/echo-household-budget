// Code generated by MockGen. DO NOT EDIT.
// Source: house_hold.go
//
// Generated by this command:
//
//	mockgen -source=house_hold.go -destination=../mock/domainmodel/mock_house_hold.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHouseHoldRepository is a mock of HouseHoldRepository interface.
type MockHouseHoldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHouseHoldRepositoryMockRecorder
	isgomock struct{}
}

// MockHouseHoldRepositoryMockRecorder is the mock recorder for MockHouseHoldRepository.
type MockHouseHoldRepositoryMockRecorder struct {
	mock *MockHouseHoldRepository
}

// NewMockHouseHoldRepository creates a new mock instance.
func NewMockHouseHoldRepository(ctrl *gomock.Controller) *MockHouseHoldRepository {
	mock := &MockHouseHoldRepository{ctrl: ctrl}
	mock.recorder = &MockHouseHoldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseHoldRepository) EXPECT() *MockHouseHoldRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHouseHoldRepository) Create(houseHold *domainmodel.HouseHold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", houseHold)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHouseHoldRepositoryMockRecorder) Create(houseHold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHouseHoldRepository)(nil).Create), houseHold)
}

// CreateUserHouseHold mocks base method.
func (m *MockHouseHoldRepository) CreateUserHouseHold(userHouseHold *domainmodel.UserHouseHold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserHouseHold", userHouseHold)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserHouseHold indicates an expected call of CreateUserHouseHold.
func (mr *MockHouseHoldRepositoryMockRecorder) CreateUserHouseHold(userHouseHold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserHouseHold", reflect.TypeOf((*MockHouseHoldRepository)(nil).CreateUserHouseHold), userHouseHold)
}

// Delete mocks base method.
func (m *MockHouseHoldRepository) Delete(houseHoldID domainmodel.HouseHoldID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", houseHoldID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHouseHoldRepositoryMockRecorder) Delete(houseHoldID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHouseHoldRepository)(nil).Delete), houseHoldID)
}

// FindByHouseHoldID mocks base method.
func (m *MockHouseHoldRepository) FindByHouseHoldID(houseHoldID domainmodel.HouseHoldID) (*domainmodel.HouseHold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHouseHoldID", houseHoldID)
	ret0, _ := ret[0].(*domainmodel.HouseHold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHouseHoldID indicates an expected call of FindByHouseHoldID.
func (mr *MockHouseHoldRepositoryMockRecorder) FindByHouseHoldID(houseHoldID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHouseHoldID", reflect.TypeOf((*MockHouseHoldRepository)(nil).FindByHouseHoldID), houseHoldID)
}

// FindByUserID mocks base method.
func (m *MockHouseHoldRepository) FindByUserID(userID domainmodel.UserID) (*domainmodel.HouseHold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userID)
	ret0, _ := ret[0].(*domainmodel.HouseHold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockHouseHoldRepositoryMockRecorder) FindByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockHouseHoldRepository)(nil).FindByUserID), userID)
}

// Update mocks base method.
func (m *MockHouseHoldRepository) Update(houseHold *domainmodel.HouseHold) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", houseHold)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHouseHoldRepositoryMockRecorder) Update(houseHold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHouseHoldRepository)(nil).Update), houseHold)
}
