// Code generated by MockGen. DO NOT EDIT.
// Source: category.go
//
// Generated by this command:
//
//	mockgen -source=category.go -destination=../mock/domainmodel/mock_category.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// CreateHouseHoldCategory mocks base method.
func (m *MockCategoryRepository) CreateHouseHoldCategory(categoryLimit *domainmodel.CategoryLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouseHoldCategory", categoryLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHouseHoldCategory indicates an expected call of CreateHouseHoldCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateHouseHoldCategory(categoryLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouseHoldCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateHouseHoldCategory), categoryLimit)
}

// CreateMasterCategory mocks base method.
func (m *MockCategoryRepository) CreateMasterCategory(category *domainmodel.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMasterCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMasterCategory indicates an expected call of CreateMasterCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateMasterCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMasterCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateMasterCategory), category)
}

// DeleteHouseHoldCategory mocks base method.
func (m *MockCategoryRepository) DeleteHouseHoldCategory(categoryLimitID domainmodel.CategoryLimitID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHouseHoldCategory", categoryLimitID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHouseHoldCategory indicates an expected call of DeleteHouseHoldCategory.
func (mr *MockCategoryRepositoryMockRecorder) DeleteHouseHoldCategory(categoryLimitID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHouseHoldCategory", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteHouseHoldCategory), categoryLimitID)
}

// DeleteMasterCategory mocks base method.
func (m *MockCategoryRepository) DeleteMasterCategory(id domainmodel.CategoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMasterCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMasterCategory indicates an expected call of DeleteMasterCategory.
func (mr *MockCategoryRepositoryMockRecorder) DeleteMasterCategory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMasterCategory", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteMasterCategory), id)
}

// FindHouseHoldCategoryByHouseHoldID mocks base method.
func (m *MockCategoryRepository) FindHouseHoldCategoryByHouseHoldID(categoryLimitID domainmodel.CategoryLimitID) (*domainmodel.CategoryLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHouseHoldCategoryByHouseHoldID", categoryLimitID)
	ret0, _ := ret[0].(*domainmodel.CategoryLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHouseHoldCategoryByHouseHoldID indicates an expected call of FindHouseHoldCategoryByHouseHoldID.
func (mr *MockCategoryRepositoryMockRecorder) FindHouseHoldCategoryByHouseHoldID(categoryLimitID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHouseHoldCategoryByHouseHoldID", reflect.TypeOf((*MockCategoryRepository)(nil).FindHouseHoldCategoryByHouseHoldID), categoryLimitID)
}

// FindMasterCategoryByID mocks base method.
func (m *MockCategoryRepository) FindMasterCategoryByID(categoryID domainmodel.CategoryID) (*domainmodel.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMasterCategoryByID", categoryID)
	ret0, _ := ret[0].(*domainmodel.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMasterCategoryByID indicates an expected call of FindMasterCategoryByID.
func (mr *MockCategoryRepositoryMockRecorder) FindMasterCategoryByID(categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMasterCategoryByID", reflect.TypeOf((*MockCategoryRepository)(nil).FindMasterCategoryByID), categoryID)
}

// UpdateHouseHoldCategory mocks base method.
func (m *MockCategoryRepository) UpdateHouseHoldCategory(categoryLimit *domainmodel.CategoryLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHouseHoldCategory", categoryLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHouseHoldCategory indicates an expected call of UpdateHouseHoldCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateHouseHoldCategory(categoryLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHouseHoldCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateHouseHoldCategory), categoryLimit)
}

// UpdateMasterCategory mocks base method.
func (m *MockCategoryRepository) UpdateMasterCategory(category *domainmodel.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMasterCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMasterCategory indicates an expected call of UpdateMasterCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateMasterCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMasterCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateMasterCategory), category)
}
