// Code generated by MockGen. DO NOT EDIT.
// Source: user_account.go
//
// Generated by this command:
//
//	mockgen -source=user_account.go -destination=../mock/domainmodel/mock_user_account.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserAccountRepository is a mock of UserAccountRepository interface.
type MockUserAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockUserAccountRepositoryMockRecorder is the mock recorder for MockUserAccountRepository.
type MockUserAccountRepositoryMockRecorder struct {
	mock *MockUserAccountRepository
}

// NewMockUserAccountRepository creates a new mock instance.
func NewMockUserAccountRepository(ctrl *gomock.Controller) *MockUserAccountRepository {
	mock := &MockUserAccountRepository{ctrl: ctrl}
	mock.recorder = &MockUserAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccountRepository) EXPECT() *MockUserAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserAccountRepository) Create(userAccount *domainmodel.UserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAccountRepositoryMockRecorder) Create(userAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAccountRepository)(nil).Create), userAccount)
}

// Delete mocks base method.
func (m *MockUserAccountRepository) Delete(id domainmodel.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserAccountRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserAccountRepository)(nil).Delete), id)
}

// FetchMe mocks base method.
func (m *MockUserAccountRepository) FetchMe(userID domainmodel.UserID) (*domainmodel.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMe", userID)
	ret0, _ := ret[0].(*domainmodel.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMe indicates an expected call of FetchMe.
func (mr *MockUserAccountRepositoryMockRecorder) FetchMe(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMe", reflect.TypeOf((*MockUserAccountRepository)(nil).FetchMe), userID)
}

// FindByLINEUserID mocks base method.
func (m *MockUserAccountRepository) FindByLINEUserID(userID domainmodel.LINEUserID) (*domainmodel.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLINEUserID", userID)
	ret0, _ := ret[0].(*domainmodel.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLINEUserID indicates an expected call of FindByLINEUserID.
func (mr *MockUserAccountRepositoryMockRecorder) FindByLINEUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLINEUserID", reflect.TypeOf((*MockUserAccountRepository)(nil).FindByLINEUserID), userID)
}
