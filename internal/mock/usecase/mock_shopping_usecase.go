// Code generated by MockGen. DO NOT EDIT.
// Source: shopping_usecase.go
//
// Generated by this command:
//
//	mockgen -source=shopping_usecase.go -destination=../mock/usecase/mock_shopping_usecase.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockShoppingUsecase is a mock of ShoppingUsecase interface.
type MockShoppingUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingUsecaseMockRecorder
	isgomock struct{}
}

// MockShoppingUsecaseMockRecorder is the mock recorder for MockShoppingUsecase.
type MockShoppingUsecaseMockRecorder struct {
	mock *MockShoppingUsecase
}

// NewMockShoppingUsecase creates a new mock instance.
func NewMockShoppingUsecase(ctrl *gomock.Controller) *MockShoppingUsecase {
	mock := &MockShoppingUsecase{ctrl: ctrl}
	mock.recorder = &MockShoppingUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingUsecase) EXPECT() *MockShoppingUsecaseMockRecorder {
	return m.recorder
}

// CreateShopping mocks base method.
func (m *MockShoppingUsecase) CreateShopping(shopping *domainmodel.ShoppingMemo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShopping", shopping)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShopping indicates an expected call of CreateShopping.
func (mr *MockShoppingUsecaseMockRecorder) CreateShopping(shopping any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShopping", reflect.TypeOf((*MockShoppingUsecase)(nil).CreateShopping), shopping)
}

// DeleteShopping mocks base method.
func (m *MockShoppingUsecase) DeleteShopping(id domainmodel.ShoppingID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopping", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShopping indicates an expected call of DeleteShopping.
func (mr *MockShoppingUsecaseMockRecorder) DeleteShopping(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopping", reflect.TypeOf((*MockShoppingUsecase)(nil).DeleteShopping), id)
}

// FetchShopping mocks base method.
func (m *MockShoppingUsecase) FetchShopping(householdID domainmodel.HouseHoldID) ([]*domainmodel.ShoppingMemo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchShopping", householdID)
	ret0, _ := ret[0].([]*domainmodel.ShoppingMemo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchShopping indicates an expected call of FetchShopping.
func (mr *MockShoppingUsecaseMockRecorder) FetchShopping(householdID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchShopping", reflect.TypeOf((*MockShoppingUsecase)(nil).FetchShopping), householdID)
}
