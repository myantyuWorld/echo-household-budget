// Code generated by MockGen. DO NOT EDIT.
// Source: receipt_analyze_usecase.go
//
// Generated by this command:
//
//	mockgen -source=receipt_analyze_usecase.go -destination=../mock/usecase/mock_receipt_analyze_usecase.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domainmodel "echo-household-budget/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReceiptAnalyzeUsecase is a mock of ReceiptAnalyzeUsecase interface.
type MockReceiptAnalyzeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptAnalyzeUsecaseMockRecorder
	isgomock struct{}
}

// MockReceiptAnalyzeUsecaseMockRecorder is the mock recorder for MockReceiptAnalyzeUsecase.
type MockReceiptAnalyzeUsecaseMockRecorder struct {
	mock *MockReceiptAnalyzeUsecase
}

// NewMockReceiptAnalyzeUsecase creates a new mock instance.
func NewMockReceiptAnalyzeUsecase(ctrl *gomock.Controller) *MockReceiptAnalyzeUsecase {
	mock := &MockReceiptAnalyzeUsecase{ctrl: ctrl}
	mock.recorder = &MockReceiptAnalyzeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptAnalyzeUsecase) EXPECT() *MockReceiptAnalyzeUsecaseMockRecorder {
	return m.recorder
}

// CreateReceiptAnalyzeReception mocks base method.
func (m *MockReceiptAnalyzeUsecase) CreateReceiptAnalyzeReception(receipt *domainmodel.ReceiptAnalyzeReception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptAnalyzeReception", receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReceiptAnalyzeReception indicates an expected call of CreateReceiptAnalyzeReception.
func (mr *MockReceiptAnalyzeUsecaseMockRecorder) CreateReceiptAnalyzeReception(receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptAnalyzeReception", reflect.TypeOf((*MockReceiptAnalyzeUsecase)(nil).CreateReceiptAnalyzeReception), receipt)
}

// CreateReceiptAnalyzeResult mocks base method.
func (m *MockReceiptAnalyzeUsecase) CreateReceiptAnalyzeResult(receipt *domainmodel.ReceiptAnalyze) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptAnalyzeResult", receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReceiptAnalyzeResult indicates an expected call of CreateReceiptAnalyzeResult.
func (mr *MockReceiptAnalyzeUsecaseMockRecorder) CreateReceiptAnalyzeResult(receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptAnalyzeResult", reflect.TypeOf((*MockReceiptAnalyzeUsecase)(nil).CreateReceiptAnalyzeResult), receipt)
}

// FindByID mocks base method.
func (m *MockReceiptAnalyzeUsecase) FindByID(id domainmodel.HouseHoldID) (*domainmodel.ReceiptAnalyze, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domainmodel.ReceiptAnalyze)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReceiptAnalyzeUsecaseMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReceiptAnalyzeUsecase)(nil).FindByID), id)
}
