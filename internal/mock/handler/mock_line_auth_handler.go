// Code generated by MockGen. DO NOT EDIT.
// Source: line_auth_handler.go
//
// Generated by this command:
//
//	mockgen -source=line_auth_handler.go -destination=../mock/handler/mock_line_auth_handler.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
	isgomock struct{}
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockAuthHandler) Callback(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Callback indicates an expected call of Callback.
func (mr *MockAuthHandlerMockRecorder) Callback(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockAuthHandler)(nil).Callback), c)
}

// FetchMe mocks base method.
func (m *MockAuthHandler) FetchMe(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMe", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchMe indicates an expected call of FetchMe.
func (mr *MockAuthHandlerMockRecorder) FetchMe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMe", reflect.TypeOf((*MockAuthHandler)(nil).FetchMe), c)
}

// Login mocks base method.
func (m *MockAuthHandler) Login(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthHandlerMockRecorder) Login(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthHandler)(nil).Login), c)
}

// Logout mocks base method.
func (m *MockAuthHandler) Logout(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthHandlerMockRecorder) Logout(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthHandler)(nil).Logout), c)
}
