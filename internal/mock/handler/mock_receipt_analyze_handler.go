// Code generated by MockGen. DO NOT EDIT.
// Source: receipt_analyze_handler.go
//
// Generated by this command:
//
//	mockgen -source=receipt_analyze_handler.go -destination=../mock/handler/mock_receipt_analyze_handler.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockReceiptAnalyzeHandler is a mock of ReceiptAnalyzeHandler interface.
type MockReceiptAnalyzeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptAnalyzeHandlerMockRecorder
	isgomock struct{}
}

// MockReceiptAnalyzeHandlerMockRecorder is the mock recorder for MockReceiptAnalyzeHandler.
type MockReceiptAnalyzeHandlerMockRecorder struct {
	mock *MockReceiptAnalyzeHandler
}

// NewMockReceiptAnalyzeHandler creates a new mock instance.
func NewMockReceiptAnalyzeHandler(ctrl *gomock.Controller) *MockReceiptAnalyzeHandler {
	mock := &MockReceiptAnalyzeHandler{ctrl: ctrl}
	mock.recorder = &MockReceiptAnalyzeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptAnalyzeHandler) EXPECT() *MockReceiptAnalyzeHandlerMockRecorder {
	return m.recorder
}

// CreateReceiptAnalyzeReception mocks base method.
func (m *MockReceiptAnalyzeHandler) CreateReceiptAnalyzeReception(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptAnalyzeReception", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReceiptAnalyzeReception indicates an expected call of CreateReceiptAnalyzeReception.
func (mr *MockReceiptAnalyzeHandlerMockRecorder) CreateReceiptAnalyzeReception(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptAnalyzeReception", reflect.TypeOf((*MockReceiptAnalyzeHandler)(nil).CreateReceiptAnalyzeReception), c)
}

// CreateReceiptAnalyzeResult mocks base method.
func (m *MockReceiptAnalyzeHandler) CreateReceiptAnalyzeResult(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptAnalyzeResult", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReceiptAnalyzeResult indicates an expected call of CreateReceiptAnalyzeResult.
func (mr *MockReceiptAnalyzeHandlerMockRecorder) CreateReceiptAnalyzeResult(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptAnalyzeResult", reflect.TypeOf((*MockReceiptAnalyzeHandler)(nil).CreateReceiptAnalyzeResult), c)
}

// FindByID mocks base method.
func (m *MockReceiptAnalyzeHandler) FindByID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReceiptAnalyzeHandlerMockRecorder) FindByID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReceiptAnalyzeHandler)(nil).FindByID), c)
}
