// Code generated by MockGen. DO NOT EDIT.
// Source: line_repository.go
//
// Generated by this command:
//
//	mockgen -source=line_repository.go -destination=../mock/repository/mock_line_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	repository "echo-household-budget/internal/infrastructure/persistence/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLineRepository is a mock of LineRepository interface.
type MockLineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLineRepositoryMockRecorder
	isgomock struct{}
}

// MockLineRepositoryMockRecorder is the mock recorder for MockLineRepository.
type MockLineRepositoryMockRecorder struct {
	mock *MockLineRepository
}

// NewMockLineRepository creates a new mock instance.
func NewMockLineRepository(ctrl *gomock.Controller) *MockLineRepository {
	mock := &MockLineRepository{ctrl: ctrl}
	mock.recorder = &MockLineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineRepository) EXPECT() *MockLineRepositoryMockRecorder {
	return m.recorder
}

// GetAuthCodeUrl mocks base method.
func (m *MockLineRepository) GetAuthCodeUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthCodeUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthCodeUrl indicates an expected call of GetAuthCodeUrl.
func (mr *MockLineRepositoryMockRecorder) GetAuthCodeUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCodeUrl", reflect.TypeOf((*MockLineRepository)(nil).GetAuthCodeUrl))
}

// GetUserInfo mocks base method.
func (m *MockLineRepository) GetUserInfo(code string) (*repository.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", code)
	ret0, _ := ret[0].(*repository.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockLineRepositoryMockRecorder) GetUserInfo(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockLineRepository)(nil).GetUserInfo), code)
}

// MatchState mocks base method.
func (m *MockLineRepository) MatchState(state string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchState", state)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchState indicates an expected call of MatchState.
func (mr *MockLineRepositoryMockRecorder) MatchState(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchState", reflect.TypeOf((*MockLineRepository)(nil).MatchState), state)
}
